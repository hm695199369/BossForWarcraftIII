package IceMage
import public PlayerUnitHelper
import public PlayerUnit
import ExternalDefines
import HashMap
import initlater IceBarrier
import initlater IceLance
import initlater ForstBolt
import initlater ConeofCold

enum Skill
	Frost_Bolt
	Cone_of_Cold
	Ice_Lance
	Ice_Barrier
	Max
public class IceMage extends PlayerUnit
	construct(player pl, unit u)
		super(pl, u)
		m_self_career = ice_mage
		init_self()

	override function spell(int skill_id)
		m_mapSkill.get(mapSkill.get(skill_id)).cast()
	
	private var mapSkill = new HashMap<int, Skill>
	private var m_mapSkill = new HashMap<Skill, IceMageSkill>

	override private function listen_all()
		for i = 0 to (Skill.Max castTo int) - 1
			if m_mapSkill.has(i castTo Skill)
				m_mapSkill.get(i castTo Skill).listen()
			else
				if _DEBUG
					print("INIT NOT FINISHED YET")

	private function init_self() 
		m_mapSkill.put(Skill.Ice_Barrier, new IceBarrier(m_self_unit))
		m_mapSkill.put(Skill.Ice_Lance, new IceLance(m_self_unit))
		m_mapSkill.put(Skill.Cone_of_Cold, new ConeofCold(m_self_unit))
		m_mapSkill.put(Skill.Frost_Bolt, new ForstBolt(m_self_unit))

		mapSkill = new HashMap<int, Skill>
		for i = 0 to (Skill.Max castTo int) - 1
			Skill sk = i castTo Skill
			if m_mapSkill.has(sk)
				mapSkill.put(m_mapSkill.get(sk).get_self_id(), sk)
		listen_all()


public class IceMageSkill extends ISkill
	construct(unit spell_unit)
		super(spell_unit)

	override function cast()
		if _DEBUG
			print("IceMageSkill::error call")
		
	override function listen()

	override function get_self_id() returns int
		return 0
